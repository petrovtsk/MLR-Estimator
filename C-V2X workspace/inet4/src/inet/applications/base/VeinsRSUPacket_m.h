//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/base/VeinsRSUPacket.msg.
//

#ifndef __INET_VEINSRSUPACKET_M_H
#define __INET_VEINSRSUPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class VeinsRSUPacket;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/base/VeinsRSUPacket.msg:17</tt> by nedtool.
 * <pre>
 * //
 * // Generic application packet
 * //
 * // TODO rename to ApplicationHeader and remove ByteCountChunk from ApplicationHeaderSerializer
 * class VeinsRSUPacket extends FieldsChunk
 * {
 *     uint32_t sequenceNumber;
 *     simtime_t casOdoslania;
 *     simtime_t firstSent;
 *     double posX;
 *     double posY;
 *     string sequence;
 *     int prikaz;
 *     int visID;
 *     bool approaching;
 * }
 * </pre>
 */
class INET_API VeinsRSUPacket : public ::inet::FieldsChunk
{
  protected:
    uint32_t sequenceNumber = 0;
    omnetpp::simtime_t casOdoslania = SIMTIME_ZERO;
    omnetpp::simtime_t firstSent = SIMTIME_ZERO;
    double posX = 0;
    double posY = 0;
    omnetpp::opp_string sequence;
    int prikaz = 0;
    int visID = 0;
    bool approaching = false;

  private:
    void copy(const VeinsRSUPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VeinsRSUPacket&);

  public:
    VeinsRSUPacket();
    VeinsRSUPacket(const VeinsRSUPacket& other);
    virtual ~VeinsRSUPacket();
    VeinsRSUPacket& operator=(const VeinsRSUPacket& other);
    virtual VeinsRSUPacket *dup() const override {return new VeinsRSUPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint32_t sequenceNumber);
    virtual omnetpp::simtime_t getCasOdoslania() const;
    virtual void setCasOdoslania(omnetpp::simtime_t casOdoslania);
    virtual omnetpp::simtime_t getFirstSent() const;
    virtual void setFirstSent(omnetpp::simtime_t firstSent);
    virtual double getPosX() const;
    virtual void setPosX(double posX);
    virtual double getPosY() const;
    virtual void setPosY(double posY);
    virtual const char * getSequence() const;
    virtual void setSequence(const char * sequence);
    virtual int getPrikaz() const;
    virtual void setPrikaz(int prikaz);
    virtual int getVisID() const;
    virtual void setVisID(int visID);
    virtual bool getApproaching() const;
    virtual void setApproaching(bool approaching);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VeinsRSUPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VeinsRSUPacket& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_VEINSRSUPACKET_M_H

